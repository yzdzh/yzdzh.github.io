<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>星光的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yzdzh.github.io/"/>
  <updated>2022-10-16T05:30:25.481Z</updated>
  <id>https://yzdzh.github.io/</id>
  
  <author>
    <name>xingguang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>adb设置网络代理方法</title>
    <link href="https://yzdzh.github.io/post/21760092.html"/>
    <id>https://yzdzh.github.io/post/21760092.html</id>
    <published>2022-10-16T05:30:00.000Z</published>
    <updated>2022-10-16T05:30:25.481Z</updated>
    
    <content type="html"><![CDATA[<p>用window11的安卓子系统配合fiddler抓包，设置网络代理后每次重启系统后设置的网络配置都会重置，这里需要利用adb工具固定代理配置。</p><h5 id="1、adb工具-谷歌下载地址"><a href="#1、adb工具-谷歌下载地址" class="headerlink" title="1、adb工具-谷歌下载地址"></a>1、adb工具-谷歌下载地址</h5><p><a href="https://dl.google.com/android/repository/platform-tools-latest-windows.zip" target="_blank" rel="noopener">https://dl.google.com/android/repository/platform-tools-latest-windows.zip</a></p><h5 id="2、设置环境变量："><a href="#2、设置环境变量：" class="headerlink" title="2、设置环境变量："></a>2、设置环境变量：</h5><p>把下载好的adb软件解压放到 ：D:\Program Files\platform-tools，然后path环境变量加入D:\Program Files\platform-tools\bin</p><h5 id="3、设置代理（无需重启）："><a href="#3、设置代理（无需重启）：" class="headerlink" title="3、设置代理（无需重启）："></a>3、设置代理（无需重启）：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adb shell settings put global http_proxy 代理IP地址:端口号</span><br><span class="line">例如：</span><br><span class="line">adb shell settings put global http_proxy  192.168.33.11:8888</span><br></pre></td></tr></table></figure><p>移除代理方法（移除代理后要重启手机才能生效。）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">adb shell settings delete global http_proxy</span><br><span class="line">adb shell settings delete global global_http_proxy_host</span><br><span class="line">adb shell settings delete global global_http_proxy_port</span><br><span class="line">adb reboot</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;用window11的安卓子系统配合fiddler抓包，设置网络代理后每次重启系统后设置的网络配置都会重置，这里需要利用adb工具固定代理配置。&lt;/p&gt;
&lt;h5 id=&quot;1、adb工具-谷歌下载地址&quot;&gt;&lt;a href=&quot;#1、adb工具-谷歌下载地址&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="wsl" scheme="https://yzdzh.github.io/categories/wsl/"/>
    
    
  </entry>
  
  <entry>
    <title>清除window版docker容器日志</title>
    <link href="https://yzdzh.github.io/post/2418778912.html"/>
    <id>https://yzdzh.github.io/post/2418778912.html</id>
    <published>2022-10-16T05:18:00.000Z</published>
    <updated>2022-10-16T05:18:46.592Z</updated>
    
    <content type="html"><![CDATA[<p>在 Windows 上，Docker 在名为 MobyLinuxVM 的 VM 中运行，但您无法通过 Hyper-V 管理器登录到该 VM。从技术上讲，我们不会通过 SSH 进入 VM，我们将创建一个具有完全 root 访问权限的容器，然后从那里访问文件系统。</p><p>步骤分三步<br>1、获取可以访问 Docker 守护进程的容器<br>2、以完全 root 访问权限运行容器<br>3、切换到主机文件系统</p><h6 id="1、打开PowerShell窗口并执行以下命令"><a href="#1、打开PowerShell窗口并执行以下命令" class="headerlink" title="1、打开PowerShell窗口并执行以下命令"></a>1、打开PowerShell窗口并执行以下命令</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run --privileged -it -v /var/run/docker.sock:/var/run/docker.sock jongallant/ubuntu-docker-client </span><br><span class="line">docker run --net=host --ipc=host --uts=host --pid=host -it --security-opt=seccomp=unconfined --privileged --rm -v /:/host alpine /bin/sh</span><br><span class="line">chroot /host</span><br></pre></td></tr></table></figure><p>最后执行清除日志命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">truncate -s 0 /var/lib/docker/containers/*/*-json.log</span><br></pre></td></tr></table></figure><p>参考原文：<a href="https://blog.jongallant.com/2017/11/ssh-into-docker-vm-windows" target="_blank" rel="noopener">https://blog.jongallant.com/2017/11/ssh-into-docker-vm-windows</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在 Windows 上，Docker 在名为 MobyLinuxVM 的 VM 中运行，但您无法通过 Hyper-V 管理器登录到该 VM。从技术上讲，我们不会通过 SSH 进入 VM，我们将创建一个具有完全 root 访问权限的容器，然后从那里访问文件系统。&lt;/p&gt;
&lt;p
      
    
    </summary>
    
    
      <category term="wsl" scheme="https://yzdzh.github.io/categories/wsl/"/>
    
    
  </entry>
  
  <entry>
    <title>sourcetree和phpstrom使用wsl中的git方法</title>
    <link href="https://yzdzh.github.io/post/2354606930.html"/>
    <id>https://yzdzh.github.io/post/2354606930.html</id>
    <published>2022-10-16T05:14:00.000Z</published>
    <updated>2022-10-16T05:17:00.610Z</updated>
    
    <content type="html"><![CDATA[<p>如果把代码放在wsl子系统中，sourcetree却是window的话，这时候sourcetree访问代码速度会很慢，有个解决方法就是sourcetree直接使用wsl中的git来处理代码。</p><h6 id="1、升级wsl中的git版本"><a href="#1、升级wsl中的git版本" class="headerlink" title="1、升级wsl中的git版本"></a>1、升级wsl中的git版本</h6><p>注:安装更高版本是因为phpstrom不支持yum默认安装的git1.8版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install http://opensource.wandisco.com/centos/7/git/x86_64/wandisco-git-release-7-2.noarch.rpm</span><br><span class="line">yum -y install git</span><br><span class="line">git version</span><br></pre></td></tr></table></figure><h6 id="2、复制git-exe文件到-D-Program-Files-Git-bin"><a href="#2、复制git-exe文件到-D-Program-Files-Git-bin" class="headerlink" title="2、复制git.exe文件到 D:\Program Files\Git\bin"></a>2、复制git.exe文件到 D:\Program Files\Git\bin</h6><p>wslgit.exe下载地址：<br><a href="https://github.com/andy-5/wslgit/releases" target="_blank" rel="noopener">https://github.com/andy-5/wslgit/releases</a></p><p>注：git.exe文件有wslgit.exe改名而来</p><h6 id="3、安装指定的sourcetree版本，3-3-9或3-3-8"><a href="#3、安装指定的sourcetree版本，3-3-9或3-3-8" class="headerlink" title="3、安装指定的sourcetree版本，3.3.9或3.3.8"></a>3、安装指定的sourcetree版本，3.3.9或3.3.8</h6><p>sourcetree版本下载地址：<br><a href="https://www.sourcetreeapp.com/download-archives" target="_blank" rel="noopener">https://www.sourcetreeapp.com/download-archives</a></p><h6 id="4、sourcetree-gt-工具-gt-选项-gt-Git-gt-git版本-gt-禁用LibGit2集成"><a href="#4、sourcetree-gt-工具-gt-选项-gt-Git-gt-git版本-gt-禁用LibGit2集成" class="headerlink" title="4、sourcetree-&gt;工具-&gt;选项-&gt;Git-&gt;git版本-&gt;禁用LibGit2集成"></a>4、sourcetree-&gt;工具-&gt;选项-&gt;Git-&gt;git版本-&gt;禁用LibGit2集成</h6>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;如果把代码放在wsl子系统中，sourcetree却是window的话，这时候sourcetree访问代码速度会很慢，有个解决方法就是sourcetree直接使用wsl中的git来处理代码。&lt;/p&gt;
&lt;h6 id=&quot;1、升级wsl中的git版本&quot;&gt;&lt;a href=&quot;#1、升
      
    
    </summary>
    
    
      <category term="wsl" scheme="https://yzdzh.github.io/categories/wsl/"/>
    
    
  </entry>
  
  <entry>
    <title>docker-desktop数据迁移到其他盘</title>
    <link href="https://yzdzh.github.io/post/216260312.html"/>
    <id>https://yzdzh.github.io/post/216260312.html</id>
    <published>2022-10-16T05:03:00.000Z</published>
    <updated>2022-10-16T05:09:21.962Z</updated>
    
    <content type="html"><![CDATA[<h6 id="1、停止docker服务"><a href="#1、停止docker服务" class="headerlink" title="1、停止docker服务"></a>1、停止docker服务</h6><h6 id="2、备份现有镜像文件"><a href="#2、备份现有镜像文件" class="headerlink" title="2、备份现有镜像文件"></a>2、备份现有镜像文件</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wsl --<span class="built_in">export</span> docker-desktop-data <span class="string">"D:\wsl\data\docker-desktop-data.tar"</span></span><br><span class="line"></span><br><span class="line">wsl --<span class="built_in">export</span> docker-desktop-data 备份文件输出的位置</span><br></pre></td></tr></table></figure><h6 id="3、删除旧的数据"><a href="#3、删除旧的数据" class="headerlink" title="3、删除旧的数据"></a>3、删除旧的数据</h6><p>敲入如下指令，注销子系统</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --unregister docker-desktop-data</span><br></pre></td></tr></table></figure><p><img src="/resource/images/pasted2-34.png" alt="upload successful"></p><h6 id="4、导入备份文件，生成新的文件"><a href="#4、导入备份文件，生成新的文件" class="headerlink" title="4、导入备份文件，生成新的文件"></a>4、导入备份文件，生成新的文件</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --import docker-desktop-data <span class="string">"D:\wsl\data"</span> <span class="string">"D:\wsl\data\docker-desktop-data.tar"</span> --version 2</span><br></pre></td></tr></table></figure><h6 id="5、运行docker，验证服务是否正常，正常情况下可以删除备份的tar文件"><a href="#5、运行docker，验证服务是否正常，正常情况下可以删除备份的tar文件" class="headerlink" title="5、运行docker，验证服务是否正常，正常情况下可以删除备份的tar文件"></a>5、运行docker，验证服务是否正常，正常情况下可以删除备份的tar文件</h6><p><img src="/resource/images/pasted2-35.png" alt="upload successful"></p><h6 id="6、可以使用docker-system-df查看磁盘使用情况，可以使用docker-system-prune释放空间。"><a href="#6、可以使用docker-system-df查看磁盘使用情况，可以使用docker-system-prune释放空间。" class="headerlink" title="6、可以使用docker system df查看磁盘使用情况，可以使用docker system prune释放空间。"></a>6、可以使用docker system df查看磁盘使用情况，可以使用docker system prune释放空间。</h6><p><img src="/resource/images/pasted2-36.png" alt="upload successful"><br><img src="/resource/images/pasted2-37.png" alt="upload successful"></p><p>参考原文：<a href="https://blog.csdn.net/daobaqin/article/details/122204270" target="_blank" rel="noopener">https://blog.csdn.net/daobaqin/article/details/122204270</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;1、停止docker服务&quot;&gt;&lt;a href=&quot;#1、停止docker服务&quot; class=&quot;headerlink&quot; title=&quot;1、停止docker服务&quot;&gt;&lt;/a&gt;1、停止docker服务&lt;/h6&gt;&lt;h6 id=&quot;2、备份现有镜像文件&quot;&gt;&lt;a href=&quot;#2、备
      
    
    </summary>
    
    
      <category term="wsl" scheme="https://yzdzh.github.io/categories/wsl/"/>
    
    
  </entry>
  
  <entry>
    <title>rabbitmq的四种交换机类型</title>
    <link href="https://yzdzh.github.io/post/3830161646.html"/>
    <id>https://yzdzh.github.io/post/3830161646.html</id>
    <published>2022-07-25T19:37:00.000Z</published>
    <updated>2022-07-25T19:37:56.911Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/xingxia/p/rabbitmq_types.html" target="_blank" rel="noopener">https://www.cnblogs.com/xingxia/p/rabbitmq_types.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/xingxia/p/rabbitmq_types.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnblogs.com/xingxia/p/rabbitmq
      
    
    </summary>
    
    
      <category term="rabbitmq" scheme="https://yzdzh.github.io/categories/rabbitmq/"/>
    
    
  </entry>
  
  <entry>
    <title>快捷搭建vpn</title>
    <link href="https://yzdzh.github.io/post/3544074938.html"/>
    <id>https://yzdzh.github.io/post/3544074938.html</id>
    <published>2022-06-26T13:26:00.000Z</published>
    <updated>2022-06-26T13:27:27.707Z</updated>
    
    <content type="html"><![CDATA[<h3 id="更新内核及一键安装vpn"><a href="#更新内核及一键安装vpn" class="headerlink" title="更新内核及一键安装vpn"></a>更新内核及一键安装vpn</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y update kernel &amp; yum -y update &amp; <span class="built_in">cd</span> / &amp; wget https://github.com/Nyr/openvpn-install/raw/master/openvpn-install.sh &amp;&amp; bash openvpn-install.sh</span><br></pre></td></tr></table></figure><h3 id="开启-BBR-加速"><a href="#开启-BBR-加速" class="headerlink" title="开启 BBR 加速"></a>开启 BBR 加速</h3><p>1、bbr一键安装脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh &amp;&amp; chmod +x bbr.sh &amp;&amp; ./bbr.sh</span><br></pre></td></tr></table></figure><p>2、打开sysctl.conf文件添加 启动bbr配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysctl.conf</span><br><span class="line"></span><br><span class="line">net.core.default_qdisc = fq</span><br><span class="line">net.ipv4.tcp_congestion_control = bbr</span><br></pre></td></tr></table></figure><p>3、重新加载系统配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl -p</span><br></pre></td></tr></table></figure><p>4、查看bbr是否生效  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl net.ipv4.tcp_available_congestion_control</span><br></pre></td></tr></table></figure><p>结果有返回bbr说明已启动  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net.ipv4.tcp_available_congestion_control = reno cubic bbr</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;更新内核及一键安装vpn&quot;&gt;&lt;a href=&quot;#更新内核及一键安装vpn&quot; class=&quot;headerlink&quot; title=&quot;更新内核及一键安装vpn&quot;&gt;&lt;/a&gt;更新内核及一键安装vpn&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;t
      
    
    </summary>
    
    
      <category term="linux" scheme="https://yzdzh.github.io/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>wsl安装centos7方法</title>
    <link href="https://yzdzh.github.io/post/3450921099.html"/>
    <id>https://yzdzh.github.io/post/3450921099.html</id>
    <published>2022-05-05T17:06:00.000Z</published>
    <updated>2022-05-05T17:06:39.744Z</updated>
    
    <content type="html"><![CDATA[<p>使用大神封装好的工具即可！</p><p><a href="https://github.com/yuk7/wsldl#wsldl" target="_blank" rel="noopener">https://github.com/yuk7/wsldl#wsldl</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用大神封装好的工具即可！&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/yuk7/wsldl#wsldl&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/yuk7/wsldl#wsldl&lt;/a&gt;
      
    
    </summary>
    
    
      <category term="wsl" scheme="https://yzdzh.github.io/categories/wsl/"/>
    
    
  </entry>
  
  <entry>
    <title>WSL2 从C盘 导入到 D盘</title>
    <link href="https://yzdzh.github.io/post/1539025967.html"/>
    <id>https://yzdzh.github.io/post/1539025967.html</id>
    <published>2022-05-05T16:52:00.000Z</published>
    <updated>2022-05-05T17:01:55.267Z</updated>
    
    <content type="html"><![CDATA[<h3 id="首先还是查看已经安装"><a href="#首先还是查看已经安装" class="headerlink" title="首先还是查看已经安装"></a>首先还是查看已经安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\Windows10&gt; wsl -l</span><br><span class="line">适用于 Linux 的 Windows 子系统分发版:Ubuntu (默认)</span><br><span class="line">准备移动</span><br></pre></td></tr></table></figure><p>记得使用管理员权限打开这个powershell</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --<span class="built_in">export</span> Ubuntu d://ubuntu.tar</span><br></pre></td></tr></table></figure><h3 id="注销旧有的WSL"><a href="#注销旧有的WSL" class="headerlink" title="注销旧有的WSL"></a>注销旧有的WSL</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wsl --unregister UbuntuPS D:\&gt; wsl --unregister Ubuntu</span><br><span class="line">正在注销...</span><br><span class="line">PS D:\&gt;</span><br></pre></td></tr></table></figure><h3 id="重新导入到D盘现在D-盘新建一个空目录"><a href="#重新导入到D盘现在D-盘新建一个空目录" class="headerlink" title="重新导入到D盘现在D 盘新建一个空目录"></a>重新导入到D盘现在D 盘新建一个空目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir Ubuntu_wsl2 </span><br><span class="line">wsl --import Ubuntu D://Ubuntu_wsl2  D://ubuntu-20.04.tar</span><br></pre></td></tr></table></figure><h3 id="更改登录用户"><a href="#更改登录用户" class="headerlink" title="更改登录用户"></a>更改登录用户</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ubuntu config --default-user root</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;首先还是查看已经安装&quot;&gt;&lt;a href=&quot;#首先还是查看已经安装&quot; class=&quot;headerlink&quot; title=&quot;首先还是查看已经安装&quot;&gt;&lt;/a&gt;首先还是查看已经安装&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr
      
    
    </summary>
    
    
      <category term=" " scheme="https://yzdzh.github.io/categories//"/>
    
      <category term="wsl" scheme="https://yzdzh.github.io/categories//wsl/"/>
    
    
  </entry>
  
  <entry>
    <title>certbot自动签证机器人</title>
    <link href="https://yzdzh.github.io/post/1542514284.html"/>
    <id>https://yzdzh.github.io/post/1542514284.html</id>
    <published>2022-03-23T18:37:00.000Z</published>
    <updated>2022-06-17T19:38:29.816Z</updated>
    
    <content type="html"><![CDATA[<h3 id="宿主机安装插件方法"><a href="#宿主机安装插件方法" class="headerlink" title="宿主机安装插件方法"></a>宿主机安装插件方法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install certbot python2-certbot-nginx -y</span><br></pre></td></tr></table></figure><h3 id="docker-nginx容器安装方法"><a href="#docker-nginx容器安装方法" class="headerlink" title="docker nginx容器安装方法"></a>docker nginx容器安装方法</h3><h5 id="1、容器需要将证书文件夹挂载到宿主机-etc-letsencrypt"><a href="#1、容器需要将证书文件夹挂载到宿主机-etc-letsencrypt" class="headerlink" title="1、容器需要将证书文件夹挂载到宿主机 /etc/letsencrypt"></a>1、容器需要将证书文件夹挂载到宿主机 /etc/letsencrypt</h5><h5 id="2、安装certbot插件"><a href="#2、安装certbot插件" class="headerlink" title="2、安装certbot插件"></a>2、安装certbot插件</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt install certbot python-certbot-nginx</span><br></pre></td></tr></table></figure><p>安装证书命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certbot --nginx</span><br></pre></td></tr></table></figure><p>注：<br>1、如果报错temp_checkpoint，直接执行以下命令删掉临时文件即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf /var/lib/letsencrypt/temp_checkpoint/*</span><br></pre></td></tr></table></figure><p>#定时脚本更新证书有效期</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10 20 7 * * /usr/bin/certbot renew --force-renew</span><br></pre></td></tr></table></figure><p>#定时脚本更新证书有效期（docker内访问）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10 20 7 * *  docker <span class="built_in">exec</span> -it com_nginx  bash -c  <span class="string">"/usr/bin/certbot renew --force-renew"</span></span><br></pre></td></tr></table></figure><p>nginx常用命令<br>检测重启是否nginx正常： </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -t</span><br></pre></td></tr></table></figure><p>重启nginx：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;宿主机安装插件方法&quot;&gt;&lt;a href=&quot;#宿主机安装插件方法&quot; class=&quot;headerlink&quot; title=&quot;宿主机安装插件方法&quot;&gt;&lt;/a&gt;宿主机安装插件方法&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td
      
    
    </summary>
    
    
      <category term="linux" scheme="https://yzdzh.github.io/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>Windows11安装Android子系统及抓包方法</title>
    <link href="https://yzdzh.github.io/post/2040882575.html"/>
    <id>https://yzdzh.github.io/post/2040882575.html</id>
    <published>2022-03-23T18:29:00.000Z</published>
    <updated>2022-03-23T18:35:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>需要确保已经开启Hyper-V功能</p><h3 id="1、安装Android子系统"><a href="#1、安装Android子系统" class="headerlink" title="1、安装Android子系统"></a>1、安装Android子系统</h3><p>1）、直接打开网站：<a href="https://store.rg-adguard.net" target="_blank" rel="noopener">https://store.rg-adguard.net</a></p><p><img src="/resource/images/pasted2-17.png" alt="upload successful"><br>　　按照上图，在对应的选择框中分别选择ProductID、Slow，在搜索框中输入9P3395VX91NR，点击确定。</p><p>　　然后点击最后一个msibundle文件，就能下载该文件了。（我这边浏览器下载很慢，我是直接复制链接用的迅雷下载，直接满速，一分多种就下载好了。）</p><p>2）、将下载的文件放在D盘根目录下，然后以管理员身份运行powershell，预防万一可以打开powershell后运行，确保完全是管理员模式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Start-Process powershell -Verb runAs</span><br></pre></td></tr></table></figure><p>3）、进入D盘后安卓安卓子系统 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Add-AppxPackage 文件名</span><br></pre></td></tr></table></figure><p><img src="/resource/images/pasted2-18.png" alt="upload successful"><br>Add-AppxPackage 【你下载的msibundle文件全称】<br>PS：直接在Add-AppxPackage后面复制你下载的msibundle文件名，包括后缀.msibundle</p><p>安装好以后就能在开始菜单中看到安卓子系统的图标了。</p><p><img src="/resource/images/pasted2-19.png" alt="upload successful"></p><p>然后开启“开发人员模式”</p><p><img src="/resource/images/pasted2-20.png" alt="upload successful"></p><h3 id="2、安装Android侧载工具（WSA-工具箱）"><a href="#2、安装Android侧载工具（WSA-工具箱）" class="headerlink" title="2、安装Android侧载工具（WSA 工具箱）"></a>2、安装Android侧载工具（WSA 工具箱）</h3><p>这款侧载工具是我们国内的大佬开发的，名字叫做WSA 工具箱，它主要的功能就是安装APK文件、后台APP管理、查看子系统进程以及文件传输。这款工具其实是上架微软商店的应用，所以它也是绝对的安全，我们尽管放心用便是。</p><p><img src="/resource/images/pasted2-21.png" alt="upload successful"></p><p>如果搜索不到，这个是它的地址：<br><a href="https://www.microsoft.com/store/productId/9PPSP2MKVTGT" target="_blank" rel="noopener">https://www.microsoft.com/store/productId/9PPSP2MKVTGT</a></p><h3 id="3、Fiddler配置android子系统app抓包"><a href="#3、Fiddler配置android子系统app抓包" class="headerlink" title="3、Fiddler配置android子系统app抓包"></a>3、Fiddler配置android子系统app抓包</h3><p>对应开发人员，需要在模拟机上对测试包进行地址抓包<br>1）、下载Fiddler软件<br>2）、开启允许远程连接</p><p><img src="/resource/images/pasted2-22.png" alt="upload successful"><br>3）、https相关设置</p><p><img src="/resource/images/pasted2-23.png" alt="upload successful"><br>4）、获取对应的wsa的宿主地址<br>打开cmd或powershell 输入 ipconfig 获取对应配置</p><p><img src="/resource/images/pasted2-24.png" alt="upload successful"><br>获取当前地址 192.168.33.11<br>5）、需要下载一个浏览器，比如x浏览器 或者如果wsa中已有，可以忽略该步骤<br>用浏览器打开 <a href="http://192.168.33.11:8888" target="_blank" rel="noopener">http://192.168.33.11:8888</a></p><p><img src="/resource/images/pasted2-25.png" alt="upload successful"></p><p>下载完成后，是无法进行安装的，需要去设置里安装。此时 打开已经下载好的was工具箱</p><p><img src="/resource/images/pasted2-26.png" alt="upload successful"><br>依次执行</p><p><img src="/resource/images/pasted2-27.png" alt="upload successful"></p><p><img src="/resource/images/pasted2-28.png" alt="upload successful"></p><p><img src="/resource/images/pasted2-29.png" alt="upload successful"></p><p><img src="/resource/images/pasted2-30.png" alt="upload successful"></p><p><img src="/resource/images/pasted2-31.png" alt="upload successful"><br>点击安装完成即可</p><p>6）、设置proxy</p><p><img src="/resource/images/pasted2-32.png" alt="upload successful"></p><p><img src="/resource/images/pasted2-33.png" alt="upload successful"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;需要确保已经开启Hyper-V功能&lt;/p&gt;
&lt;h3 id=&quot;1、安装Android子系统&quot;&gt;&lt;a href=&quot;#1、安装Android子系统&quot; class=&quot;headerlink&quot; title=&quot;1、安装Android子系统&quot;&gt;&lt;/a&gt;1、安装Android子系统&lt;/h3&gt;
      
    
    </summary>
    
    
      <category term="wsl" scheme="https://yzdzh.github.io/categories/wsl/"/>
    
    
  </entry>
  
  <entry>
    <title>java新启程-HelloWorld</title>
    <link href="https://yzdzh.github.io/post/2119301209.html"/>
    <id>https://yzdzh.github.io/post/2119301209.html</id>
    <published>2022-01-30T20:19:00.000Z</published>
    <updated>2022-01-30T20:31:04.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="官网下载java11做为学习版本"><a href="#官网下载java11做为学习版本" class="headerlink" title="官网下载java11做为学习版本"></a>官网下载java11做为学习版本</h3><p>下载地址：<a href="http://jdk.java.net/java-se-ri/11" target="_blank" rel="noopener">http://jdk.java.net/java-se-ri/11</a></p><h3 id="1、JDK目录结构介绍"><a href="#1、JDK目录结构介绍" class="headerlink" title="1、JDK目录结构介绍"></a>1、JDK目录结构介绍</h3><p><img src="/resource/images/pasted2-13.png" alt="upload successful"></p><p>安装后配置环境变量</p><p><img src="/resource/images/pasted2-14.png" alt="upload successful"></p><p>变量名：JAVA_HOME<br>值：D:\develop\java\jdk-11</p><p>变量名：Path<br>值：D:\develop\java\jdk-11\bin</p><h3 id="2、开始编写第一个程序HelloWorld"><a href="#2、开始编写第一个程序HelloWorld" class="headerlink" title="2、开始编写第一个程序HelloWorld"></a>2、开始编写第一个程序HelloWorld</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"HelloWorld"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/resource/images/pasted2-15.png" alt="upload successful"></p><h3 id="3、编译java并执行java文件"><a href="#3、编译java并执行java文件" class="headerlink" title="3、编译java并执行java文件"></a>3、编译java并执行java文件</h3><p><img src="/resource/images/pasted2-16.png" alt="upload successful"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;官网下载java11做为学习版本&quot;&gt;&lt;a href=&quot;#官网下载java11做为学习版本&quot; class=&quot;headerlink&quot; title=&quot;官网下载java11做为学习版本&quot;&gt;&lt;/a&gt;官网下载java11做为学习版本&lt;/h3&gt;&lt;p&gt;下载地址：&lt;a href=&quot;
      
    
    </summary>
    
    
      <category term="java" scheme="https://yzdzh.github.io/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>ab压测工具</title>
    <link href="https://yzdzh.github.io/post/984256984.html"/>
    <id>https://yzdzh.github.io/post/984256984.html</id>
    <published>2021-12-31T19:05:00.000Z</published>
    <updated>2022-01-03T18:23:42.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>ubuntu安装ab</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install apache2-utils</span><br></pre></td></tr></table></figure><p><strong>centos安装ab</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install httpd-tools</span><br></pre></td></tr></table></figure><p><strong>ab 测试命令</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ab -n 100 -c 10 http://test.com/</span><br></pre></td></tr></table></figure><p>其中－n表示请求数，－c表示并发数</p><p>原文链接：<a href="https://www.jianshu.com/p/43d04d8baaf7" target="_blank" rel="noopener">https://www.jianshu.com/p/43d04d8baaf7</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;ubuntu安装ab&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/
      
    
    </summary>
    
    
      <category term="linux" scheme="https://yzdzh.github.io/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>linux网络带宽监控工具</title>
    <link href="https://yzdzh.github.io/post/3478081417.html"/>
    <id>https://yzdzh.github.io/post/3478081417.html</id>
    <published>2021-12-31T18:02:00.000Z</published>
    <updated>2022-01-03T18:22:54.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>centos安装命令</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install dstat -y</span><br></pre></td></tr></table></figure><p><strong>查看命令</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dstat -cdnrsy</span><br></pre></td></tr></table></figure><p><strong>效果如下图：</strong></p><p><img src="/resource/images/pasted2-12.png" alt="upload successful"></p><table><thead><tr><th>分组</th><th>分组含义及子项字段含义</th></tr></thead><tbody><tr><td>CPU状态</td><td>CPU的使用率。显示了用户占比，系统占比、空闲占比、等待占比、硬中断和软中断情况。</td></tr><tr><td>磁盘统计</td><td>磁盘的读写，分别显示磁盘的读、写总数。</td></tr><tr><td>网络统计</td><td>网络设备发送和接受的数据，分别显示的网络收、发数据总数。</td></tr><tr><td>分页统计</td><td>系统的分页活动。分别显示换入（in）和换出（out）。</td></tr><tr><td>系统统计</td><td>统计中断（int）和上下文切换（csw）。</td></tr></tbody></table><p>*<em>常见选项 *</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">-c：显示CPU系统占用，用户占用，空闲，等待，中断，软件中断等信息。</span><br><span class="line">-C：当有多个CPU时候，此参数可按需分别显示cpu状态，例：-C 0,1 是显示cpu0和cpu1的信息。</span><br><span class="line">-d：显示磁盘读写数据大小。</span><br><span class="line">-D hda,total：include hda and total。</span><br><span class="line">-n：显示网络状态。</span><br><span class="line">-N eth1,total：有多块网卡时，指定要显示的网卡。</span><br><span class="line">-l：显示系统负载情况。</span><br><span class="line">-m：显示内存使用情况。</span><br><span class="line">-g：显示页面使用情况。</span><br><span class="line">-p：显示进程状态。</span><br><span class="line">-s：显示交换分区使用情况。</span><br><span class="line">-S：类似D/N。</span><br><span class="line">-r：I/O请求情况。</span><br><span class="line">-y：系统状态。</span><br><span class="line">--ipc：显示ipc消息队列，信号等信息。</span><br><span class="line">--socket：用来显示tcp udp端口状态。</span><br><span class="line">-a：此为默认选项，等同于-cdngy。</span><br><span class="line">-v：等同于 -pmgdsc -D total。</span><br><span class="line">--output 文件：此选项也比较有用，可以把状态信息以csv的格式重定向到指定的文件中，以便日后查看。例：dstat --output /root/dstat.csv &amp; 此时让程序默默的在后台运行并把结果输出到/root/dstat.csv文件中。</span><br></pre></td></tr></table></figure><p>原文链接：<a href="https://blog.csdn.net/sinat_34789167/article/details/80986709" target="_blank" rel="noopener">https://blog.csdn.net/sinat_34789167/article/details/80986709</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;centos安装命令&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/
      
    
    </summary>
    
    
      <category term="linux" scheme="https://yzdzh.github.io/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>k8s-集群搭建的三种方式和区别，kubeadm、minikube，二进制包</title>
    <link href="https://yzdzh.github.io/post/710540892.html"/>
    <id>https://yzdzh.github.io/post/710540892.html</id>
    <published>2021-12-30T19:47:00.000Z</published>
    <updated>2022-01-01T19:53:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>k8s-集群搭建的三种方式，目前主流的搭建k8s集群的方式有kubeadm、minikube，二进制包。  </p><h5 id="1、kubeadm"><a href="#1、kubeadm" class="headerlink" title="1、kubeadm"></a>1、kubeadm</h5><ul><li>是一个工具，用于快速搭建kubernetes集群，目前应该是比较方便和推荐的，简单易用  </li><li>kubeadm是Kubernetes 1.4开始新增的特性   </li><li>kubeadm init 以及 kubeadm join 这两个命令可以快速创建 kubernetes 集群  </li></ul><h5 id="2、minikube"><a href="#2、minikube" class="headerlink" title="2、minikube"></a>2、minikube</h5><ul><li>一般用于本地开发、测试和学习，不能用于生产环境  </li><li>是一个工具，minikube快速搭建一个运行在本地的单节点的Kubernetes  </li></ul><h5 id="3、二进制包"><a href="#3、二进制包" class="headerlink" title="3、二进制包"></a>3、二进制包</h5><ul><li>在官网下载相关的组件的二进制包，上面的两个是工具，可以快速搭建集群，也就是相当于用程序脚本帮我们装好了集群，前两者属于自动部署，简化部署操作，自动部署屏蔽了很多细节，使得对各个模块感知很少，遇到问题很难排查，如果手动安装，对kubernetes理解也会更全面。  </li><li>目前生产环境的主流搭建方式，已在生产环境验证，kubeadm也可以搭建生产环境，不过kubeadm应该还没有被大规模在生产环境验证</li></ul><p>参考原文：<a href="https://www.cnblogs.com/albertzhangyu/p/13446528.html" target="_blank" rel="noopener">https://www.cnblogs.com/albertzhangyu/p/13446528.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;k8s-集群搭建的三种方式，目前主流的搭建k8s集群的方式有kubeadm、minikube，二进制包。  &lt;/p&gt;
&lt;h5 id=&quot;1、kubeadm&quot;&gt;&lt;a href=&quot;#1、kubeadm&quot; class=&quot;headerlink&quot; title=&quot;1、kubeadm&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="k8s" scheme="https://yzdzh.github.io/categories/k8s/"/>
    
    
  </entry>
  
  <entry>
    <title>linux中root账号也无法修改文件权限解决方法</title>
    <link href="https://yzdzh.github.io/post/1494107583.html"/>
    <id>https://yzdzh.github.io/post/1494107583.html</id>
    <published>2021-12-03T19:21:00.000Z</published>
    <updated>2021-12-03T19:28:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>一般是被用chattr命令锁住文件</p><h3 id="1、lsattr命令查看文件的属性"><a href="#1、lsattr命令查看文件的属性" class="headerlink" title="1、lsattr命令查看文件的属性"></a>1、lsattr命令查看文件的属性</h3><p>执行命令lsattr authorized_keys查看当前文件属性，可以发现有i和a两个属性。<br><img src="/resource/images/pasted2-11.png" alt="upload successful"></p><h3 id="2、去掉锁住的权限"><a href="#2、去掉锁住的权限" class="headerlink" title="2、去掉锁住的权限"></a>2、去掉锁住的权限</h3><p>去掉lsattr命令查看到的i和a两个属性</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chattr -ia authorized_keys</span><br></pre></td></tr></table></figure><h3 id="3、还原权限"><a href="#3、还原权限" class="headerlink" title="3、还原权限"></a>3、还原权限</h3><p>修改完后还原文件权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chattr +ia authorized_keys</span><br></pre></td></tr></table></figure><p>借鉴于原文：<br><a href="https://www.cnblogs.com/cpl9412290130/p/11592803.html" target="_blank" rel="noopener">https://www.cnblogs.com/cpl9412290130/p/11592803.html</a><br><a href="https://www.runoob.com/linux/linux-comm-chattr.html" target="_blank" rel="noopener">https://www.runoob.com/linux/linux-comm-chattr.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一般是被用chattr命令锁住文件&lt;/p&gt;
&lt;h3 id=&quot;1、lsattr命令查看文件的属性&quot;&gt;&lt;a href=&quot;#1、lsattr命令查看文件的属性&quot; class=&quot;headerlink&quot; title=&quot;1、lsattr命令查看文件的属性&quot;&gt;&lt;/a&gt;1、lsattr命令
      
    
    </summary>
    
    
      <category term="linux" scheme="https://yzdzh.github.io/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>mongodb容器的数据导入和导出</title>
    <link href="https://yzdzh.github.io/post/381300251.html"/>
    <id>https://yzdzh.github.io/post/381300251.html</id>
    <published>2021-12-03T19:01:00.000Z</published>
    <updated>2022-10-16T05:26:46.550Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、mongodump导出备份"><a href="#1、mongodump导出备份" class="headerlink" title="1、mongodump导出备份"></a>1、mongodump导出备份</h3><h4 id="1-、执行mongodump命令"><a href="#1-、执行mongodump命令" class="headerlink" title="1)、执行mongodump命令"></a>1)、执行mongodump命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it -u root com_mongo mongodump -h 127.0.0.1:27017 -d ag_mongo -u root -p 123456 --authenticationDatabase admin -o /mongo_sql_back</span><br></pre></td></tr></table></figure><p>注：<br>-h 地址<br>-d 数据库名称<br>-u 用户名<br>-p 密码<br>-o 输出地址<br>–authenticationDatabase admin 验证账户的数据库  </p><h4 id="2-、将备份文件从里面cp出来（如果已经容器目录映射，则忽略此步骤）"><a href="#2-、将备份文件从里面cp出来（如果已经容器目录映射，则忽略此步骤）" class="headerlink" title="2)、将备份文件从里面cp出来（如果已经容器目录映射，则忽略此步骤）"></a>2)、将备份文件从里面cp出来（如果已经容器目录映射，则忽略此步骤）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker cp com_mongo:mongo_sql_back /mongo_sql_back</span><br><span class="line"></span><br><span class="line">docker cp 容器名:容器内导出数据库文件夹 宿主机保存文件夹</span><br></pre></td></tr></table></figure><h3 id="2、mongorestore恢复数据库"><a href="#2、mongorestore恢复数据库" class="headerlink" title="2、mongorestore恢复数据库"></a>2、mongorestore恢复数据库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it -u root com_mongo mongorestore -h 127.0.0.1:27017 -d ag_mongo --dir /mongo_sql_back/ag_mongo -u root -p 123456 --authenticationDatabase admin</span><br></pre></td></tr></table></figure><p>注：<br>-h 地址<br>-d 数据库名称<br>-u 用户名<br>-p 密码<br>–dir 导入的数据库文件夹<br>–authenticationDatabase admin 验证账户的数据库  </p><h3 id="以上方法针对是整库，如需导入导出指定集合，可用如下方法："><a href="#以上方法针对是整库，如需导入导出指定集合，可用如下方法：" class="headerlink" title="以上方法针对是整库，如需导入导出指定集合，可用如下方法："></a>以上方法针对是整库，如需导入导出指定集合，可用如下方法：</h3><h4 id="mongodbdump导入导出指定集合方法"><a href="#mongodbdump导入导出指定集合方法" class="headerlink" title="mongodbdump导入导出指定集合方法"></a>mongodbdump导入导出指定集合方法</h4><p>导出指定集合参数  -c collection_name</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it -u root com_mongo mongodump -h 127.0.0.1:27017 -d ag_mongo -c cb_member_history  -u root -p 123456 --authenticationDatabase admin -o /opt/bitnami/mongodb/logs/mongo_sql_back</span><br></pre></td></tr></table></figure><p>导入指定集合参数  –nsInclude db_name.collection_name </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it -u root com_mongo mongorestore -h 127.0.0.1:27017 --nsInclude ag_mongo.cb_member_history --dir /opt/bitnami/mongodb/logs/mongo_sql_back/ag_mongo -u root -p 123456 --authenticationDatabase admin</span><br></pre></td></tr></table></figure><h4 id="mongoexport和mongoimport导入导出指定集合方法"><a href="#mongoexport和mongoimport导入导出指定集合方法" class="headerlink" title="mongoexport和mongoimport导入导出指定集合方法"></a>mongoexport和mongoimport导入导出指定集合方法</h4><h5 id="mongoexport-导出"><a href="#mongoexport-导出" class="headerlink" title="mongoexport 导出"></a>mongoexport 导出</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongoexport --port=27017 -u <span class="string">"root"</span> --authenticationDatabase <span class="string">"admin"</span> -p <span class="string">"123456"</span> -d ag_mongo -c cb_member_history --<span class="built_in">type</span>=json  -o /opt/bitnami/mongodb/logs/cb_member_history.json</span><br></pre></td></tr></table></figure><h5 id="mongoimport-导入"><a href="#mongoimport-导入" class="headerlink" title="mongoimport 导入"></a>mongoimport 导入</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongoimport --port=27017 -u <span class="string">"root"</span> --authenticationDatabase <span class="string">"admin"</span> -p <span class="string">"123456"</span> -d ag_mongo -c cb_member_history --<span class="built_in">type</span>=json --file=/opt/bitnami/mongodb/logs/cb_member_history.json</span><br></pre></td></tr></table></figure><p>备份方面比较：<br>1、mongoexport 可以指定集合中的字段，   mongodump最多到集合<br>2、mongoexport 可以带导出的过滤条件 -q, mongodump则不可以<br>3、mongoexport 可以导出json和csv格式，  mongodump导出的是bson可读性不如前者   </p><p>4、mongodump   的速度和压缩率都最好，每秒125M的数据，压缩率达28%<br>5、mongodump   更适合全库备份，mongoexport更适合单个集合备份   </p><p>恢复方面比较：<br>1、mongoimport  速度较快，但不保证数据完整导入 。<br>2、mongorestore 速度较慢，比mongoimport慢2.5倍左右，但是根据mongodump导出的数据，可以完整导入数据  </p><p>借鉴于原文：<a href="https://www.jianshu.com/p/398bcccd7981" target="_blank" rel="noopener">https://www.jianshu.com/p/398bcccd7981</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1、mongodump导出备份&quot;&gt;&lt;a href=&quot;#1、mongodump导出备份&quot; class=&quot;headerlink&quot; title=&quot;1、mongodump导出备份&quot;&gt;&lt;/a&gt;1、mongodump导出备份&lt;/h3&gt;&lt;h4 id=&quot;1-、执行mongodum
      
    
    </summary>
    
    
      <category term="docker" scheme="https://yzdzh.github.io/categories/docker/"/>
    
    
  </entry>
  
  <entry>
    <title>mysql容器的数据导入和导出</title>
    <link href="https://yzdzh.github.io/post/1607203207.html"/>
    <id>https://yzdzh.github.io/post/1607203207.html</id>
    <published>2021-12-03T18:30:00.000Z</published>
    <updated>2022-04-22T18:43:08.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、mysqldump导出备份"><a href="#1、mysqldump导出备份" class="headerlink" title="1、mysqldump导出备份"></a>1、mysqldump导出备份</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it  com_mysql mysqldump -c -uroot -p123456    app_agent  &gt;  app_agent.sql</span><br><span class="line"></span><br><span class="line">docker <span class="built_in">exec</span> -it  com_mysql【docker容器名称/ID】 mysqldump -uroot -p123456【数据库密码】 test_db【数据库名称】 &gt; /opt/sql_bak/test_db.sql【导出表格路径】</span><br></pre></td></tr></table></figure><p> 选项说明</p><table><thead><tr><th>参数名</th><th>缩写</th><th>含义</th></tr></thead><tbody><tr><td>–host</td><td>-h</td><td>服务器IP地址</td></tr><tr><td>–port</td><td>-P</td><td>服务器端口号</td></tr><tr><td>–user</td><td>-u</td><td>MySQL 用户名</td></tr><tr><td>–pasword</td><td>-p</td><td>MySQL 密码</td></tr><tr><td>–databases</td><td></td><td>指定要备份的数据库</td></tr><tr><td>–all-databases</td><td></td><td>备份mysql服务器上的所有数据库</td></tr><tr><td>–compact</td><td>-c</td><td>压缩模式，产生更少的输出</td></tr><tr><td>–comments</td><td></td><td>添加注释信息</td></tr><tr><td>–complete-insert</td><td></td><td>输出完成的插入语句</td></tr><tr><td>–lock-tables</td><td></td><td>备份前，锁定所有数据库表</td></tr><tr><td>–no-create-db/–no-create-info</td><td></td><td>禁止生成创建数据库语句</td></tr><tr><td>–force</td><td></td><td>当出现错误时仍然继续备份操作</td></tr><tr><td>–default-character-set</td><td></td><td>指定默认字符集</td></tr><tr><td>–add-locks</td><td></td><td>备份数据库表时锁定数据库表</td></tr></tbody></table><h3 id="2、导入数据库"><a href="#2、导入数据库" class="headerlink" title="2、导入数据库"></a>2、导入数据库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -i  com_mysql mysqldump -c -uroot -p123456    app_agent  &lt;  app_agent.sql</span><br><span class="line"></span><br><span class="line">docker <span class="built_in">exec</span> -i  com_mysql【docker容器名称/ID】 mysqltest_db_copy【数据库名称】 &lt; /opt/sql_bak/test_db.sql【本地数据表路径】</span><br></pre></td></tr></table></figure><p>注意：这里需要将参数 -it 更换为 -i ，<br>否则会报错：”the input device is not a TTY”</p><h3 id="具体导入导出示例"><a href="#具体导入导出示例" class="headerlink" title="具体导入导出示例"></a>具体导入导出示例</h3><h4 id="———–本地服务器操作————————–"><a href="#———–本地服务器操作————————–" class="headerlink" title="———–本地服务器操作————————–"></a>———–本地服务器操作————————–</h4><h6 id="直接将结果导出sql文件"><a href="#直接将结果导出sql文件" class="headerlink" title="直接将结果导出sql文件"></a>直接将结果导出sql文件</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it  com_mysql mysqldump -c -uroot -p123456    <span class="built_in">test</span>  &gt;  test.sql</span><br></pre></td></tr></table></figure><h6 id="scp复制文件到要导入的服务器指定文件夹"><a href="#scp复制文件到要导入的服务器指定文件夹" class="headerlink" title="scp复制文件到要导入的服务器指定文件夹"></a>scp复制文件到要导入的服务器指定文件夹</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scp test.sql  root@192.168.0.185:/home/servers/docker_php_dev/mysql/backup</span><br><span class="line"></span><br><span class="line">输入远程服务器的密码</span><br></pre></td></tr></table></figure><h4 id="——–远程服务器操作（以下操作可以先准备好，到最后的source命令不要执行就行了）—————"><a href="#——–远程服务器操作（以下操作可以先准备好，到最后的source命令不要执行就行了）—————" class="headerlink" title="——–远程服务器操作（以下操作可以先准备好，到最后的source命令不要执行就行了）—————-"></a>——–远程服务器操作（以下操作可以先准备好，到最后的source命令不要执行就行了）—————-</h4><h6 id="进入mysql容器"><a href="#进入mysql容器" class="headerlink" title="进入mysql容器"></a>进入mysql容器</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it  com_mysql bash</span><br></pre></td></tr></table></figure><h6 id="进入mysql"><a href="#进入mysql" class="headerlink" title="进入mysql"></a>进入mysql</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p </span><br><span class="line"></span><br><span class="line">输入mysql的root密码</span><br></pre></td></tr></table></figure><h6 id="进入要导入的数据库"><a href="#进入要导入的数据库" class="headerlink" title="进入要导入的数据库"></a>进入要导入的数据库</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use <span class="built_in">test</span>;</span><br></pre></td></tr></table></figure><h6 id="执行source命令直接导入sql文件"><a href="#执行source命令直接导入sql文件" class="headerlink" title="执行source命令直接导入sql文件"></a>执行source命令直接导入sql文件</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /bitnami/backup/test.sql</span><br></pre></td></tr></table></figure><p>借鉴于原文：<a href="https://blog.csdn.net/qq_27565769/article/details/80731271" target="_blank" rel="noopener">https://blog.csdn.net/qq_27565769/article/details/80731271</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1、mysqldump导出备份&quot;&gt;&lt;a href=&quot;#1、mysqldump导出备份&quot; class=&quot;headerlink&quot; title=&quot;1、mysqldump导出备份&quot;&gt;&lt;/a&gt;1、mysqldump导出备份&lt;/h3&gt;&lt;figure class=&quot;highli
      
    
    </summary>
    
    
      <category term="docker" scheme="https://yzdzh.github.io/categories/docker/"/>
    
    
  </entry>
  
  <entry>
    <title>docker容器以ROOT账号登录（获取ROOT权限/ROOT密码）</title>
    <link href="https://yzdzh.github.io/post/3568385113.html"/>
    <id>https://yzdzh.github.io/post/3568385113.html</id>
    <published>2021-12-03T18:27:00.000Z</published>
    <updated>2021-12-03T18:28:29.000Z</updated>
    
    <content type="html"><![CDATA[<h6 id="第一步：查看容器的CONTAINER-ID"><a href="#第一步：查看容器的CONTAINER-ID" class="headerlink" title="第一步：查看容器的CONTAINER ID"></a>第一步：查看容器的CONTAINER ID</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><h6 id="第二步：获取root权限，例如需要进入的CONTAINER-ID为4650e8d1bcca"><a href="#第二步：获取root权限，例如需要进入的CONTAINER-ID为4650e8d1bcca" class="headerlink" title="第二步：获取root权限，例如需要进入的CONTAINER ID为4650e8d1bcca"></a>第二步：获取root权限，例如需要进入的CONTAINER ID为4650e8d1bcca</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it -u root 4650e8d1bcca bash</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;第一步：查看容器的CONTAINER-ID&quot;&gt;&lt;a href=&quot;#第一步：查看容器的CONTAINER-ID&quot; class=&quot;headerlink&quot; title=&quot;第一步：查看容器的CONTAINER ID&quot;&gt;&lt;/a&gt;第一步：查看容器的CONTAINER ID&lt;/
      
    
    </summary>
    
    
      <category term="docker" scheme="https://yzdzh.github.io/categories/docker/"/>
    
    
  </entry>
  
  <entry>
    <title>ssh生成公钥私钥对和远程免密登录</title>
    <link href="https://yzdzh.github.io/post/588796899.html"/>
    <id>https://yzdzh.github.io/post/588796899.html</id>
    <published>2021-11-07T19:38:00.000Z</published>
    <updated>2021-11-07T19:41:39.000Z</updated>
    
    <content type="html"><![CDATA[<h5 id="1、在本地机器上使用ssh-keygen产生公钥私钥对"><a href="#1、在本地机器上使用ssh-keygen产生公钥私钥对" class="headerlink" title="1、在本地机器上使用ssh-keygen产生公钥私钥对"></a>1、在本地机器上使用ssh-keygen产生公钥私钥对</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">本地先安装git客户端，终端执行</span><br><span class="line">ssh-keygen -t rsa -C <span class="string">"yourname"</span></span><br><span class="line">一路回车</span><br><span class="line"></span><br><span class="line">全局设置git 用户信息</span><br><span class="line">git config --global user.email yourname</span><br><span class="line">git config --global user.name yourname</span><br><span class="line"></span><br><span class="line">chmod 600 ~/.ssh/id_rsa  ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><h5 id="2、用ssh-copy-id将公钥复制到远程机器中"><a href="#2、用ssh-copy-id将公钥复制到远程机器中" class="headerlink" title="2、用ssh-copy-id将公钥复制到远程机器中"></a>2、用ssh-copy-id将公钥复制到远程机器中</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id -i .ssh/id_rsa.pub  用户名字@192.168.x.xxx</span><br><span class="line"></span><br><span class="line">注意: ssh-copy-id 将key写到远程机器的 ~/ .ssh/authorized_key.文件中</span><br></pre></td></tr></table></figure><h5 id="3、登录到远程机器不用输入密码"><a href="#3、登录到远程机器不用输入密码" class="headerlink" title="3、登录到远程机器不用输入密码"></a>3、登录到远程机器不用输入密码</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh 用户名字@192.168.x.xxx</span><br><span class="line">Last login: Sun Nov 16 17:22:33 2008 from 192.168.1.2</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;1、在本地机器上使用ssh-keygen产生公钥私钥对&quot;&gt;&lt;a href=&quot;#1、在本地机器上使用ssh-keygen产生公钥私钥对&quot; class=&quot;headerlink&quot; title=&quot;1、在本地机器上使用ssh-keygen产生公钥私钥对&quot;&gt;&lt;/a&gt;1、在本地
      
    
    </summary>
    
    
      <category term="linux" scheme="https://yzdzh.github.io/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux下清除docker容器终端输出的全部日志</title>
    <link href="https://yzdzh.github.io/post/3848110738.html"/>
    <id>https://yzdzh.github.io/post/3848110738.html</id>
    <published>2021-11-07T12:33:00.000Z</published>
    <updated>2021-11-07T12:43:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>查询当前目录下所有文件大小  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du -h --max-depth=1</span><br></pre></td></tr></table></figure><p>查询当前目录下所有文件大小  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -lh</span><br></pre></td></tr></table></figure><p>清除docker容器终端输出的全部日志  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">truncate -s 0 /var/lib/docker/containers/*/*-json.log</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;查询当前目录下所有文件大小  &lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class
      
    
    </summary>
    
    
      <category term="linux" scheme="https://yzdzh.github.io/categories/linux/"/>
    
    
  </entry>
  
</feed>
